{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    this.status = false;\n    this.document = window.document;\n    this.getCookie = name => {\n      const cookies = document.cookie.split(';');\n      for (const cookie of cookies) {\n        const [cookieName, cookieValue] = cookie.trim().split('=');\n        if (cookieName === name) {\n          return decodeURIComponent(cookieValue);\n        }\n      }\n      return null;\n    };\n  }\n  isLoggedIn() {\n    // check if user is logged in\n    console.log(this.isLoggedInSubject.asObservable());\n    return this.status;\n  }\n  registerUser(name, email, mobileno, password) {\n    const authData = {\n      data: {\n        name: name,\n        email: email,\n        mobileno: mobileno,\n        password: password\n      }\n    };\n    return this.http.post(\"http://localhost:3000/user/register\", authData, {\n      observe: 'response'\n    });\n  }\n  login(email, password) {\n    // login user\n    const body = {\n      data: {\n        email: email,\n        password: password\n      }\n    };\n    const response = this.http.post(\"http://localhost:3000/user/login\", body, {\n      observe: 'response',\n      withCredentials: true\n    });\n    response.subscribe(response => {\n      const body = response.body;\n      console.log('response', response);\n      const userData = getCookie('userData');\n      console.log(userData);\n    });\n  }\n  logout() {\n    // logout user\n    this.status = false;\n    this.isLoggedInSubject.next(false);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPhB,sBAAiB,GAA6B,IAAIH,eAAe,CAAU,KAAK,CAAC;IAClF,gBAAW,GAAwB,IAAI,CAACI,iBAAiB,CAACC,YAAY,EAAE;IAC/E,WAAM,GAAY,KAAK;IACvB,aAAQ,GAAaC,MAAM,CAACC,QAAS;IA6B9B,cAAS,GAAIC,IAAY,IAAmB;MACjD,MAAMC,OAAO,GAAGF,QAAQ,CAACG,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;MAC1C,KAAK,MAAMD,MAAM,IAAID,OAAO,EAAE;QAC5B,MAAM,CAACG,UAAU,EAAEC,WAAW,CAAC,GAAGH,MAAM,CAACI,IAAI,EAAE,CAACH,KAAK,CAAC,GAAG,CAAC;QAC1D,IAAIC,UAAU,KAAKJ,IAAI,EAAE;UACvB,OAAOO,kBAAkB,CAACF,WAAW,CAAC;;;MAG1C,OAAO,IAAI;IACb,CAAC;EAlCsC;EAEhCG,UAAU;IACf;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,iBAAiB,CAACC,YAAY,EAAE,CAAC;IAClD,OAAO,IAAI,CAACc,MAAM;EACpB;EAEOC,YAAY,CAACZ,IAAY,EAAGa,KAAa,EAAGC,QAAgB,EAAEC,QAAgB;IACnF,MAAMC,QAAQ,GAAI;MAACC,IAAI,EAAC;QAACjB,IAAI,EAACA,IAAI;QAAGa,KAAK,EAACA,KAAK;QAAGC,QAAQ,EAACA,QAAQ;QAAGC,QAAQ,EAACA;MAAQ;IAAC,CAAC;IAC1F,OAAO,IAAI,CAACpB,IAAI,CAACuB,IAAI,CAAM,qCAAqC,EAAEF,QAAQ,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACtG;EAEOC,KAAK,CAACP,KAAY,EAACE,QAAe;IACvC;IACA,MAAMM,IAAI,GAAC;MAACJ,IAAI,EAAC;QAACJ,KAAK,EAACA,KAAK;QAACE,QAAQ,EAACA;MAAQ;IAAC,CAAC;IACjD,MAAMO,QAAQ,GAAC,IAAI,CAAC3B,IAAI,CAACuB,IAAI,CAAM,kCAAkC,EAAEG,IAAI,EAAE;MAACF,OAAO,EAAC,UAAU;MAACI,eAAe,EAAE;IAAI,CAAC,CAAC;IACxHD,QAAQ,CAACE,SAAS,CAACF,QAAQ,IAAE;MAC3B,MAAMD,IAAI,GAACC,QAAQ,CAACD,IAAI;MACxBZ,OAAO,CAACC,GAAG,CAAC,UAAU,EAACY,QAAQ,CAAC;MAChC,MAAMG,QAAQ,GAAGC,SAAS,CAAC,UAAU,CAAC;MACtCjB,OAAO,CAACC,GAAG,CAACe,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ;EAaOE,MAAM;IACX;IACA,IAAI,CAAChB,MAAM,GAAC,KAAK;IACjB,IAAI,CAACf,iBAAiB,CAACgC,IAAI,CAAC,KAAK,CAAC;EACpC;;AAhDWnC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["BehaviorSubject","AuthService","constructor","http","isLoggedInSubject","asObservable","window","document","name","cookies","cookie","split","cookieName","cookieValue","trim","decodeURIComponent","isLoggedIn","console","log","status","registerUser","email","mobileno","password","authData","data","post","observe","login","body","response","withCredentials","subscribe","userData","getCookie","logout","next","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\siddh\\OneDrive\\Desktop\\Medex\\frontend\\src\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isLoggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  public isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\r\n  status : boolean =false\r\n  document: Document = window.document!;\r\n\r\n\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public isLoggedIn(): boolean {\r\n    // check if user is logged in\r\n    console.log(this.isLoggedInSubject.asObservable())\r\n    return this.status\r\n  }\r\n\r\n  public registerUser(name: string , email: string , mobileno: String ,password: string){\r\n    const authData  = {data:{name:name , email:email , mobileno:mobileno , password:password}};\r\n    return this.http.post<any>(\"http://localhost:3000/user/register\", authData, { observe: 'response' });\r\n  }\r\n\r\n  public login(email:String,password:String) {\r\n    // login user\r\n    const body={data:{email:email,password:password}}\r\n    const response=this.http.post<any>(\"http://localhost:3000/user/login\", body, {observe:'response',withCredentials: true})\r\n    response.subscribe(response=>{\r\n      const body=response.body\r\n      console.log('response',response)\r\n      const userData = getCookie('userData');\r\n      console.log(userData);\r\n    });\r\n  }\r\n\r\n  public getCookie = (name: string): string | null => {\r\n    const cookies = document.cookie.split(';');\r\n    for (const cookie of cookies) {\r\n      const [cookieName, cookieValue] = cookie.trim().split('=');\r\n      if (cookieName === name) {\r\n        return decodeURIComponent(cookieValue);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  public logout(): void {\r\n    // logout user\r\n    this.status=false;\r\n    this.isLoggedInSubject.next(false);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}